/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BalancedScoreCardEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-23T14:46:39.591989600+05:30[Asia/Calcutta]", comments = "Generator version: 7.9.0")
public class BalancedScoreCardEntity {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_RANK_POSITION = "rankPosition";
  @SerializedName(SERIALIZED_NAME_RANK_POSITION)
  private Integer rankPosition;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EMAIL_ID = "emailId";
  @SerializedName(SERIALIZED_NAME_EMAIL_ID)
  private String emailId;

  public static final String SERIALIZED_NAME_AADHAAR_NUMBER = "aadhaarNumber";
  @SerializedName(SERIALIZED_NAME_AADHAAR_NUMBER)
  private String aadhaarNumber;

  public static final String SERIALIZED_NAME_PAN = "pan";
  @SerializedName(SERIALIZED_NAME_PAN)
  private String pan;

  public static final String SERIALIZED_NAME_TOTAL_ANALIZED_SCORE = "totalAnalizedScore";
  @SerializedName(SERIALIZED_NAME_TOTAL_ANALIZED_SCORE)
  private String totalAnalizedScore;

  public static final String SERIALIZED_NAME_PHYSICAL_SCORE = "physicalScore";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_SCORE)
  private String physicalScore;

  public static final String SERIALIZED_NAME_MENTAL_INVOLVEMENT = "mentalInvolvement";
  @SerializedName(SERIALIZED_NAME_MENTAL_INVOLVEMENT)
  private String mentalInvolvement;

  public static final String SERIALIZED_NAME_SOCIAL_INVOLVEMENT = "socialInvolvement";
  @SerializedName(SERIALIZED_NAME_SOCIAL_INVOLVEMENT)
  private String socialInvolvement;

  public static final String SERIALIZED_NAME_SPIRITUAL_INVOLVEMENT = "spiritualInvolvement";
  @SerializedName(SERIALIZED_NAME_SPIRITUAL_INVOLVEMENT)
  private String spiritualInvolvement;

  public static final String SERIALIZED_NAME_REWARDS_EARNED = "rewardsEarned";
  @SerializedName(SERIALIZED_NAME_REWARDS_EARNED)
  private String rewardsEarned;

  public BalancedScoreCardEntity() {
  }

  public BalancedScoreCardEntity id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public BalancedScoreCardEntity rankPosition(Integer rankPosition) {
    this.rankPosition = rankPosition;
    return this;
  }

  /**
   * Get rankPosition
   * @return rankPosition
   */
  @javax.annotation.Nullable
  public Integer getRankPosition() {
    return rankPosition;
  }

  public void setRankPosition(Integer rankPosition) {
    this.rankPosition = rankPosition;
  }


  public BalancedScoreCardEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BalancedScoreCardEntity emailId(String emailId) {
    this.emailId = emailId;
    return this;
  }

  /**
   * Get emailId
   * @return emailId
   */
  @javax.annotation.Nullable
  public String getEmailId() {
    return emailId;
  }

  public void setEmailId(String emailId) {
    this.emailId = emailId;
  }


  public BalancedScoreCardEntity aadhaarNumber(String aadhaarNumber) {
    this.aadhaarNumber = aadhaarNumber;
    return this;
  }

  /**
   * Get aadhaarNumber
   * @return aadhaarNumber
   */
  @javax.annotation.Nullable
  public String getAadhaarNumber() {
    return aadhaarNumber;
  }

  public void setAadhaarNumber(String aadhaarNumber) {
    this.aadhaarNumber = aadhaarNumber;
  }


  public BalancedScoreCardEntity pan(String pan) {
    this.pan = pan;
    return this;
  }

  /**
   * Get pan
   * @return pan
   */
  @javax.annotation.Nullable
  public String getPan() {
    return pan;
  }

  public void setPan(String pan) {
    this.pan = pan;
  }


  public BalancedScoreCardEntity totalAnalizedScore(String totalAnalizedScore) {
    this.totalAnalizedScore = totalAnalizedScore;
    return this;
  }

  /**
   * Get totalAnalizedScore
   * @return totalAnalizedScore
   */
  @javax.annotation.Nullable
  public String getTotalAnalizedScore() {
    return totalAnalizedScore;
  }

  public void setTotalAnalizedScore(String totalAnalizedScore) {
    this.totalAnalizedScore = totalAnalizedScore;
  }


  public BalancedScoreCardEntity physicalScore(String physicalScore) {
    this.physicalScore = physicalScore;
    return this;
  }

  /**
   * Get physicalScore
   * @return physicalScore
   */
  @javax.annotation.Nullable
  public String getPhysicalScore() {
    return physicalScore;
  }

  public void setPhysicalScore(String physicalScore) {
    this.physicalScore = physicalScore;
  }


  public BalancedScoreCardEntity mentalInvolvement(String mentalInvolvement) {
    this.mentalInvolvement = mentalInvolvement;
    return this;
  }

  /**
   * Get mentalInvolvement
   * @return mentalInvolvement
   */
  @javax.annotation.Nullable
  public String getMentalInvolvement() {
    return mentalInvolvement;
  }

  public void setMentalInvolvement(String mentalInvolvement) {
    this.mentalInvolvement = mentalInvolvement;
  }


  public BalancedScoreCardEntity socialInvolvement(String socialInvolvement) {
    this.socialInvolvement = socialInvolvement;
    return this;
  }

  /**
   * Get socialInvolvement
   * @return socialInvolvement
   */
  @javax.annotation.Nullable
  public String getSocialInvolvement() {
    return socialInvolvement;
  }

  public void setSocialInvolvement(String socialInvolvement) {
    this.socialInvolvement = socialInvolvement;
  }


  public BalancedScoreCardEntity spiritualInvolvement(String spiritualInvolvement) {
    this.spiritualInvolvement = spiritualInvolvement;
    return this;
  }

  /**
   * Get spiritualInvolvement
   * @return spiritualInvolvement
   */
  @javax.annotation.Nullable
  public String getSpiritualInvolvement() {
    return spiritualInvolvement;
  }

  public void setSpiritualInvolvement(String spiritualInvolvement) {
    this.spiritualInvolvement = spiritualInvolvement;
  }


  public BalancedScoreCardEntity rewardsEarned(String rewardsEarned) {
    this.rewardsEarned = rewardsEarned;
    return this;
  }

  /**
   * Get rewardsEarned
   * @return rewardsEarned
   */
  @javax.annotation.Nullable
  public String getRewardsEarned() {
    return rewardsEarned;
  }

  public void setRewardsEarned(String rewardsEarned) {
    this.rewardsEarned = rewardsEarned;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BalancedScoreCardEntity balancedScoreCardEntity = (BalancedScoreCardEntity) o;
    return Objects.equals(this.id, balancedScoreCardEntity.id) &&
        Objects.equals(this.rankPosition, balancedScoreCardEntity.rankPosition) &&
        Objects.equals(this.name, balancedScoreCardEntity.name) &&
        Objects.equals(this.emailId, balancedScoreCardEntity.emailId) &&
        Objects.equals(this.aadhaarNumber, balancedScoreCardEntity.aadhaarNumber) &&
        Objects.equals(this.pan, balancedScoreCardEntity.pan) &&
        Objects.equals(this.totalAnalizedScore, balancedScoreCardEntity.totalAnalizedScore) &&
        Objects.equals(this.physicalScore, balancedScoreCardEntity.physicalScore) &&
        Objects.equals(this.mentalInvolvement, balancedScoreCardEntity.mentalInvolvement) &&
        Objects.equals(this.socialInvolvement, balancedScoreCardEntity.socialInvolvement) &&
        Objects.equals(this.spiritualInvolvement, balancedScoreCardEntity.spiritualInvolvement) &&
        Objects.equals(this.rewardsEarned, balancedScoreCardEntity.rewardsEarned);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, rankPosition, name, emailId, aadhaarNumber, pan, totalAnalizedScore, physicalScore, mentalInvolvement, socialInvolvement, spiritualInvolvement, rewardsEarned);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BalancedScoreCardEntity {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    rankPosition: ").append(toIndentedString(rankPosition)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    emailId: ").append(toIndentedString(emailId)).append("\n");
    sb.append("    aadhaarNumber: ").append(toIndentedString(aadhaarNumber)).append("\n");
    sb.append("    pan: ").append(toIndentedString(pan)).append("\n");
    sb.append("    totalAnalizedScore: ").append(toIndentedString(totalAnalizedScore)).append("\n");
    sb.append("    physicalScore: ").append(toIndentedString(physicalScore)).append("\n");
    sb.append("    mentalInvolvement: ").append(toIndentedString(mentalInvolvement)).append("\n");
    sb.append("    socialInvolvement: ").append(toIndentedString(socialInvolvement)).append("\n");
    sb.append("    spiritualInvolvement: ").append(toIndentedString(spiritualInvolvement)).append("\n");
    sb.append("    rewardsEarned: ").append(toIndentedString(rewardsEarned)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("rankPosition");
    openapiFields.add("name");
    openapiFields.add("emailId");
    openapiFields.add("aadhaarNumber");
    openapiFields.add("pan");
    openapiFields.add("totalAnalizedScore");
    openapiFields.add("physicalScore");
    openapiFields.add("mentalInvolvement");
    openapiFields.add("socialInvolvement");
    openapiFields.add("spiritualInvolvement");
    openapiFields.add("rewardsEarned");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BalancedScoreCardEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BalancedScoreCardEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BalancedScoreCardEntity is not found in the empty JSON string", BalancedScoreCardEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BalancedScoreCardEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BalancedScoreCardEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("emailId") != null && !jsonObj.get("emailId").isJsonNull()) && !jsonObj.get("emailId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailId").toString()));
      }
      if ((jsonObj.get("aadhaarNumber") != null && !jsonObj.get("aadhaarNumber").isJsonNull()) && !jsonObj.get("aadhaarNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aadhaarNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aadhaarNumber").toString()));
      }
      if ((jsonObj.get("pan") != null && !jsonObj.get("pan").isJsonNull()) && !jsonObj.get("pan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pan").toString()));
      }
      if ((jsonObj.get("totalAnalizedScore") != null && !jsonObj.get("totalAnalizedScore").isJsonNull()) && !jsonObj.get("totalAnalizedScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalAnalizedScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalAnalizedScore").toString()));
      }
      if ((jsonObj.get("physicalScore") != null && !jsonObj.get("physicalScore").isJsonNull()) && !jsonObj.get("physicalScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `physicalScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("physicalScore").toString()));
      }
      if ((jsonObj.get("mentalInvolvement") != null && !jsonObj.get("mentalInvolvement").isJsonNull()) && !jsonObj.get("mentalInvolvement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mentalInvolvement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mentalInvolvement").toString()));
      }
      if ((jsonObj.get("socialInvolvement") != null && !jsonObj.get("socialInvolvement").isJsonNull()) && !jsonObj.get("socialInvolvement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `socialInvolvement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("socialInvolvement").toString()));
      }
      if ((jsonObj.get("spiritualInvolvement") != null && !jsonObj.get("spiritualInvolvement").isJsonNull()) && !jsonObj.get("spiritualInvolvement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spiritualInvolvement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spiritualInvolvement").toString()));
      }
      if ((jsonObj.get("rewardsEarned") != null && !jsonObj.get("rewardsEarned").isJsonNull()) && !jsonObj.get("rewardsEarned").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rewardsEarned` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rewardsEarned").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BalancedScoreCardEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BalancedScoreCardEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BalancedScoreCardEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BalancedScoreCardEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<BalancedScoreCardEntity>() {
           @Override
           public void write(JsonWriter out, BalancedScoreCardEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BalancedScoreCardEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BalancedScoreCardEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BalancedScoreCardEntity
   * @throws IOException if the JSON string is invalid with respect to BalancedScoreCardEntity
   */
  public static BalancedScoreCardEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BalancedScoreCardEntity.class);
  }

  /**
   * Convert an instance of BalancedScoreCardEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

